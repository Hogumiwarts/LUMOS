package com.hogumiwarts.lumos.ui.screens.devices


import android.annotation.SuppressLint
import androidx.compose.runtime.mutableStateOf
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.hogumiwarts.data.source.remote.SmartThingsApi
import com.hogumiwarts.lumos.ui.common.MyDevice
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject
import android.content.Context
import android.content.Intent
import android.devicelock.DeviceId
import android.net.Uri
import android.util.Log
import android.widget.Toast
import androidx.compose.ui.platform.LocalContext
import com.hogumiwarts.data.source.remote.AuthApi
import com.hogumiwarts.domain.model.PatchSwitchPowerResult
import com.hogumiwarts.domain.model.airpurifier.PatchAirpurifierPowerResult
import com.hogumiwarts.domain.model.audio.AudioPowerResult
import com.hogumiwarts.domain.repository.DeviceRepository
import com.hogumiwarts.domain.usecase.AirpurifierUseCase
import com.hogumiwarts.domain.usecase.AudioUseCase
import com.hogumiwarts.domain.usecase.LightUseCase
import com.hogumiwarts.domain.usecase.SwitchUseCase
import com.hogumiwarts.domain.usecase.TokensUseCase
import com.hogumiwarts.lumos.DataStore.TokenDataStore
import com.hogumiwarts.lumos.mapper.toMyDevice
import com.hogumiwarts.lumos.ui.screens.gesture.network.sendTokenToWatch
import com.hogumiwarts.lumos.ui.screens.routine.components.DeviceListType
import dagger.hilt.android.qualifiers.ApplicationContext
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.flow.first
import timber.log.Timber
import kotlinx.serialization.json.*


@HiltViewModel
class DeviceListViewModel @Inject constructor(
    private val smartThingsApi: SmartThingsApi,
    private val deviceRepository: DeviceRepository,
    private val authApi: AuthApi,
    private val tokenDataStore: TokenDataStore,
    private val jwtUseCase: TokensUseCase,
    private val switchUseCase: SwitchUseCase,
    private val lightUseCase: LightUseCase,
    private val audioUseCase: AudioUseCase,
    private val airpurifierUseCase: AirpurifierUseCase,
    @ApplicationContext private val context: Context
) : ViewModel() {

    val selectedDeviceId = mutableStateOf<Long?>(null)
    val showDialog = mutableStateOf(false)

    val clickDevice = mutableStateOf<MyDevice?>(null)


    private val _isLinked = MutableStateFlow(false) // SmartThings Í≥ÑÏ†ï Ïó∞Îèô Ïó¨Î∂Ä
    val isLinked: StateFlow<Boolean> = _isLinked

    // ÎîîÎ∞îÏù¥Ïä§ Î™©Î°ù
    private val _deviceList = MutableStateFlow<List<MyDevice>>(emptyList())
    val deviceList: StateFlow<List<MyDevice>> = _deviceList

    fun getJwt() {
        viewModelScope.launch {
            val a = jwtUseCase.getAccessToken().first()
            Log.d("TAG", "getJwt: $a")
            sendTokenToWatch(context, a)
        }

    }

    // SmartThings Ïù∏Ï¶ù URL ÏöîÏ≤≠ Î∞è Î∏åÎùºÏö∞Ï†Ä Ïù¥Îèô Ìï®Ïàò
    fun requestAuthAndOpen(context: Context) {
        viewModelScope.launch {
            try {
                val authUrl = smartThingsApi.getSmartThingsAuthUrl().url
                val intent = Intent(Intent.ACTION_VIEW, Uri.parse(authUrl))
                context.startActivity(intent)
            } catch (e: Exception) {
                Timber.tag("SmartThings").e(e, "‚ö†\uFE0F Ïù∏Ï¶ù URL ÏöîÏ≤≠ Ïã§Ìå®: " + e.message)
            }

            refreshDevicesFromDiscover(context) // backend api ÌÜµÌï¥ÏÑú Î∂àÎü¨Ïò¥
        }
    }


    // api Ïó∞Îèô ÌôïÏù∏ Ïãú ÏûêÎèôÏúºÎ°ú Í∏∞Í∏∞ Î™©Î°ù Ìò∏Ï∂ú
    fun checkAccountLinked() {
        viewModelScope.launch {
            tokenDataStore.getInstalledAppId().collect { id ->
                val isAvailable = id.isNotEmpty()
                Timber.tag("smartthings").d("üì° checkAccountLinked: id=$id ‚Üí linked=$isAvailable")

                _isLinked.value = isAvailable
                if (isAvailable) loadDevicesFromServer() // Ïó∞Îèô ÌôïÏù∏ÎêòÎ©¥ ÏûêÎèô Ìò∏Ï∂úÎê®
            }
        }
    }

    fun onDeviceClicked(device: MyDevice) {
        if (!device.isActive) {
//            showDialog.value = true
            clickDevice.value = device
        } else {
            //todo: Í∞Å Í∏∞Í∏∞Ïùò Ï†úÏñ¥ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
            clickDevice.value = device

        }
    }

    fun dismissDialog() {
        showDialog.value = false
    }

    fun getSelectedDevice(devices: List<MyDevice>): MyDevice? {
        return devices.find { it.deviceId == selectedDeviceId.value }
    }


    // dbÏóêÏÑú Í∏∞Í∏∞ Î™©Î°ù Î∞õÏïÑÏò§Í∏∞
    @SuppressLint("TimberArgTypes")
    fun loadDevicesFromServer() {
        viewModelScope.launch {
            try {
                val token = tokenDataStore.getRefreshToken().first()
                val result = deviceRepository.getDevicesFromServer(token)
                Timber.tag("DeviceList").d("üîê ÏÇ¨Ïö©Ìïú ÌÜ†ÌÅ∞: Bearer $token")

                _deviceList.value = result.map { it.toMyDevice() } // Ïù¥Ï†Ñ Î™©Î°ù ÏôÑÏ†ÑÌûà ÎçÆÍ∏∞

                Timber.tag("DeviceList").d("Ï¥ù Í∏∞Í∏∞ Ïàò: ${result.size}")
                result.forEachIndexed { index, device ->
                    Timber.tag("DeviceLog").d(
                        "[%s] üß© id=%s, name=%s, type=%s, activated=%s",
                        index,
                        device.deviceId,
                        device.deviceName,
                        device.deviceType,
                        device.activated
                    )
                }
            } catch (e: Exception) {
                Timber.e(e)
            }
        }
    }


    // Í∏∞Í∏∞ Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
    @SuppressLint("TimberArgTypes")
    fun refreshDevicesFromDiscover(context: Context) {
        viewModelScope.launch {
            try {
                val accessToken = tokenDataStore.getAccessToken().first()
                val installedAppId = "5f810cf2-432c-4c4c-bc72-c5af5abf1ef5"

                //val installedAppId = tokenDataStore.getInstalledAppId().first()
                val newDevices = deviceRepository.discoverDevices(accessToken, installedAppId)

                Timber.tag("DeviceDiscover").d("üîÑ Discover Í∏∞Í∏∞ Ïàò: ${newDevices.size}")
                newDevices.forEachIndexed { index, device ->
                    Timber.tag("DeviceDiscover").d(
                        "[%d] üõ∞Ô∏è id=%d, name=%s, type=%s, activated=%s",
                        index,
                        device.deviceId,
                        device.deviceName,
                        device.deviceType,
                        device.activated
                    )
                }

                val currentList = _deviceList.value
                val currentIds = currentList.map { it.deviceId }.toSet()

                val additional = newDevices
                    .filter { it.deviceId !in currentIds }
                    .map { it.toMyDevice() }

                _deviceList.value = currentList + additional

                //_deviceList.value = result.map { it.toMyDevice() }

                Toast.makeText(
                    context, "Í∏∞Í∏∞ Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ® ÏôÑÎ£å ‚ú®" +
                            "", Toast.LENGTH_SHORT
                ).show()

            } catch (e: Exception) {
                Timber.e(e, "‚ùå Í∏∞Í∏∞ Discover Ïã§Ìå®")
            }
        }
    }

    fun toggleDeviceState(deviceId: Long, deviceType: DeviceListType) {
        val currentList = _deviceList.value.toMutableList()

        val index = currentList.indexOfFirst { it.deviceId == deviceId }
        if (index != -1) {
            val target = currentList[index]
            // ÏÑúÎ≤ÑÎûë Ìò∏Ï∂ú
            viewModelScope.launch {

                when (deviceType) {
                    DeviceListType.AIRPURIFIER -> {
                        val result = airpurifierUseCase.patchAirpurifierPower(
                            deviceId = deviceId.toLong(),
                            !target.isOn
                        )
                        when (result) {
                            is PatchAirpurifierPowerResult.Error -> {
                                // TODO: ÏóêÎü¨ Ï≤òÎ¶¨
                            }

                            is PatchAirpurifierPowerResult.Success -> {
                                val updated = target.copy(isOn = result.data.activated) // isOn ÌÜ†Í∏Ä
                                currentList[index] = updated
                                _deviceList.value = currentList
                            }
                        }
                    }

                    DeviceListType.LIGHT -> {
                        val result =
                            lightUseCase.patchLightPower(deviceId = deviceId.toLong(), !target.isOn)
                        when (result) {
                            is PatchSwitchPowerResult.Error -> {
                                // TODO: ÏóêÎü¨ Ï≤òÎ¶¨
                            }

                            is PatchSwitchPowerResult.Success -> {
                                val updated = target.copy(isOn = result.data.activated) // isOn ÌÜ†Í∏Ä
                                currentList[index] = updated
                                _deviceList.value = currentList
                            }
                        }

                    }

                    DeviceListType.AUDIO -> {
                        val result =
                            audioUseCase.patchAudioPower(deviceId = deviceId.toLong(), !target.isOn)
                        when (result) {
                            is AudioPowerResult.Error -> {
                                // TODO: ÏóêÎü¨ Ï≤òÎ¶¨
                            }

                            is AudioPowerResult.Success -> {
                                val updated = target.copy(isOn = result.data.activated) // isOn ÌÜ†Í∏Ä
                                currentList[index] = updated
                                _deviceList.value = currentList
                            }
                        }
                    }

                    DeviceListType.SWITCH -> {
                        val result = switchUseCase.patchSwitchStatus(
                            deviceId = deviceId.toLong(),
                            !target.isOn
                        )
                        when (result) {
                            is PatchSwitchPowerResult.Error -> {
                                // TODO: ÏóêÎü¨ Ï≤òÎ¶¨
                            }

                            is PatchSwitchPowerResult.Success -> {
                                val updated = target.copy(isOn = result.data.activated) // isOn ÌÜ†Í∏Ä
                                currentList[index] = updated
                                _deviceList.value = currentList
                            }
                        }
                    }

                    DeviceListType.ETC -> {}
                }


            }


            val updated = target.copy(isOn = !target.isOn) // isOn ÌÜ†Í∏Ä
            currentList[index] = updated
            _deviceList.value = currentList
        }
    }

    private fun observeTokenChanges() {
        viewModelScope.launch {
            tokenDataStore.getInstalledAppId().collect { id ->
                _isLinked.value = id.isNotEmpty()
            }
        }
    }
}
