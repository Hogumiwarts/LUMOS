package com.hogumiwarts.lumos.ui.screens.home

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.hogumiwarts.domain.model.ApiResult
import com.hogumiwarts.domain.model.MemberResult
import com.hogumiwarts.domain.repository.MemberRepository
import com.hogumiwarts.domain.usecase.GetWeatherUseCase
import com.hogumiwarts.lumos.DataStore.TokenDataStore
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.launch
import org.orbitmvi.orbit.ContainerHost
import org.orbitmvi.orbit.viewmodel.container
import timber.log.Timber
import javax.inject.Inject
import kotlin.math.log

@HiltViewModel
class HomeViewModel @Inject constructor(
    private val getWeatherUseCase: GetWeatherUseCase,
    private val memberRepository: MemberRepository
) : ContainerHost<HomeState, HomeSideEffect>, ViewModel() {

    @Inject
    lateinit var tokenDataStore: TokenDataStore

    override val container = container<HomeState, HomeSideEffect>(HomeState())

    fun onIntent(action: HomeIntent) = intent {
        when (action) {
            is HomeIntent.LoadWeather -> {
                fetchWeather(lat = action.latitude, lon = action.longitude)
            }
        }
    }


    /*
     * Ïã§Ï†ú API Ìò∏Ï∂ú + ÏÉÅÌÉú Í∞±Ïã† Î°úÏßÅ
     */
    private fun fetchWeather(lat: Double, lon: Double) = intent {
        // 1) Î°úÎî© ÏãúÏûë
        reduce { state.copy(isLoading = true, errorMessage = null) }

        // 2) UseCase Ìò∏Ï∂ú ÌõÑ Í≤∞Í≥º Ï≤òÎ¶¨
        getWeatherUseCase(lat, lon).collect { result ->
            when (result) {
                is ApiResult.Loading -> {
                    // Î°úÎî© Ï§ë
                    reduce { state.copy(isLoading = true) }
                }

                is ApiResult.Success -> {
                    Timber.tag("Weather").i(
                        """
                        ‚úÖ ÎÇ†Ïî® Ï†ïÎ≥¥ Î∂àÎü¨Ïò§Í∏∞
                        ${result.message}
                        ${result.data}
                        """.trimIndent()
                    )
                    // ÏÑ±Í≥µ
                    reduce {
                        state.copy(
                            isLoading = false,
                            weatherInfo = result.data,
                            errorMessage = null
                        )
                    }
                }

                is ApiResult.Error -> {
                    // HTTP ÏóêÎü¨
                    reduce { state.copy(isLoading = false) }
                    postSideEffect(HomeSideEffect.ShowError(result.message ?: "ÏÑúÎ≤Ñ Ïò§Î•ò"))
                }

                is ApiResult.Fail -> {
                    // ÎÑ§Ìä∏ÏõåÌÅ¨ ÏòàÏô∏
                    reduce { state.copy(isLoading = false) }
                    postSideEffect(HomeSideEffect.ShowError(result.message ?: "ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ Ïò§Î•ò"))
                }
            }
        }
    }

    // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï°∞Ìöå -> Ïù¥Î¶Ñ
    fun getMemberInfo() {
        viewModelScope.launch {
            tokenDataStore.getRefreshToken().collect() { token ->
                when (val result = memberRepository.member(token)) {
                    is MemberResult.Success -> {
                        val name = result.name
                        Timber.tag("Member").d("üôã‚Äç‚ôÄÔ∏è ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ: $name")

                        // ÏÉÅÌÉú ÏóÖÎéÉ ÎòêÎäî UI Ï∂úÎ†•Ïö©ÏúºÎ°ú Ï†ÄÏû•
                        intent {
                            reduce { state.copy(userName = name) }
                        }
                    }

                    is MemberResult.Failure -> {
                        Timber.tag("Member").e("ÌöåÏõê Ï†ïÎ≥¥ Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®: ${result.message}")
                        intent {
                            postSideEffect(HomeSideEffect.ShowError(result.message))
                        }
                    }
                }

            }
        }
    }
}