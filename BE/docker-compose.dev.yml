services:

  # Spring Cloud Gateway
  gateway-service:
    build:
      context: ./gateway-service
    container_name: lumos-gateway-service
    ports:
      - "80:8080"  # 외부 80 → 내부 Spring 포트
    env_file:
      - .env.dev
    depends_on:
      - gesture-sensor-service
      - auth-service
      - member-service
      - smartthings-service
    networks:
      - app-network

  # 제스처 센서 서비스 (Spring Boot)
  gesture-sensor-service:
    build:
      context: ./gesture-sensor-service
    container_name: lumos-gesture-sensor-service
    expose:
      - "8080"  # 내부 통신용
    env_file:
      - ./gesture-sensor-service/.env
    depends_on:
      - postgres
      - redis
    networks:
      - app-network
  
  # 인증 서비스
  auth-service:
    build:
      context: ./auth-service
    container_name: lumos-auth-service
    expose:
      - "8080"
    env_file:
      - .env.dev
    depends_on:
      - postgres
      - redis
    networks:
      - app-network
  
  # 회원 서비스
  member-service:
    build:
      context: ./member-service
    container_name: lumos-member-service
    expose:
      - "8080"
    env_file:
      - ./member-service/.env
    depends_on:
      - postgres
      - redis
    networks:
      - app-network
  
  # 기기 서비스
  device-service:
    build:
      context: ./device-service
    container_name: lumos-device-service
    expose:
      - "8080"
    env_file:
      - ./device-service/.env
    depends_on:
      - postgres
      - redis
    networks:
      - app-network
  
  # SmartThings 서버
  smartthings-service:
    build:
      context: ./smartthings-service
    container_name: lumos-smartthings-service
    expose:
      - "3000"
    # ports:
    #   - "3000:3000"  # 외부(호스트) → 내부(컨테이너) 포트 바인딩
    env_file:
      - ./smartthings-service/.env
    networks:
      - app-network

  # PostgreSQL
  postgres:
    image: postgres:latest
    container_name: lumos-postgres
    env_file:
      - .env.dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - app-network
  
  # Redis
  redis:
    image: redis:latest
    container_name: lumos-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      - app-network
  
  redis-insight:
    image: redis/redisinsight:latest
    container_name: lumos-redisinsight
    restart: always
    ports:
      - "5540:5540"
    volumes:
      - redis-insight-data:/data
    depends_on:
      - redis
    networks:
      - app-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: lumos-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - app-network
  
  zookeeper-0:
    image: bitnami/zookeeper:3.9.2
    container_name: lumos-zookeeper-0
    ports:
      - 2181:2181
    env_file:
      - .env.dev
    networks:
      - app-network

  kafka-0:
    image: bitnami/kafka:3.7.0
    container_name: lumos-kafka-0
    ports:
      - 9094:9094
    env_file:
      - .env.dev
    networks:
      - app-network

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    container_name: lumos-kafka-ui
    depends_on:
      - kafka-0
    ports:
      - 8090:8080
    env_file:
      - .env.dev
    networks:
      - app-network

volumes:
  postgres_data:
  grafana_data:
  redis_data:
    driver: local
  redis-insight-data:
  zookeeper_data:
  kafka_data:

networks:
  app-network:

